{"version":3,"sources":["js/task-03.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","Promise","resolve","reject","delay","setTimeout","id","time","console","log","logSuccess","logError","warn","amount","then","catch"],"mappings":";AAGA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,GACf,IAAIC,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAQX,EAA0B,IAAK,KAC7CY,WAAW,KACUT,KAAKE,SAAW,GAGjCI,EAAQ,CAAEI,GAAIN,EAAYM,GAAIC,KAAMH,IAEpCD,EAAOH,EAAYM,KAEpBF,GAEHI,QAAQC,IAAIL,KAIVM,EAAa,EAAGJ,GAAAA,EAAIC,KAAAA,MACxBC,QAAQC,mBAAmBH,kBAAmBC,QAG1CI,EAAWL,IACfE,QAAQI,qCAAqCN,+BAU/CP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAEhEZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAEhEZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAAMC,KAAKJ,GAAYK,MAAMJ,GAE/DZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ","file":"task-03.d1f33d64.js","sourceRoot":"../src","sourcesContent":["/* Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\nа принимала всего один параметр transaction и возвращала промис. */\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n\n    console.log(delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/* Работает так */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n/* Должно работать так */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}